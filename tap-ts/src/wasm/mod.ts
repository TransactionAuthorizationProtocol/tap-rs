/**
 * WASM module loader for TAP-TS
 * 
 * This module handles loading and initializing the WASM module
 * that contains the core TAP implementation.
 */

import { TapError, ErrorType } from '../error.ts';

// Import the WASM module types
// In a real build, this would be generated by wasm-bindgen
type WasmModule = {
  Agent: any;
  TapNode: any;
  Message: any;
  MessageType: any;
  NodeConfig: any;
  AgentConfig: any;
  create_did_key: () => { did: string };
};

/**
 * Event names for the WASM module
 */
export enum WasmEvent {
  /** Module loading started */
  LOADING = 'loading',
  
  /** Module successfully loaded */
  LOADED = 'loaded',
  
  /** Error occurred during loading */
  ERROR = 'error',
}

/** Type for WASM event listeners */
type WasmEventListener = (event: WasmEvent, data?: any) => void;

/**
 * Class for loading and initializing the WASM module
 */
export class WasmLoader {
  private module: WasmModule | null = null;
  private isLoaded = false;
  private isInitialized = false;
  private listeners: Map<WasmEvent, Set<WasmEventListener>> = new Map();
  
  constructor() {}
  
  /**
   * Load the WASM module
   * 
   * @returns A promise that resolves when the module is loaded
   * @throws {TapError} If there's an error loading the module
   */
  async load(): Promise<void> {
    if (this.isLoaded) {
      return;
    }
    
    this.emit(WasmEvent.LOADING);
    
    try {
      // In Deno, we need to load the WASM module a bit differently than in Node.js
      const wasmModulePath = new URL('./bindgen/tap_ts_wasm_bg.wasm', import.meta.url);
      const wasmInitPath = new URL('./bindgen/tap_ts_wasm.js', import.meta.url);
      
      // Import the WASM initialization module
      const wasmInit = await import(wasmInitPath.href);
      
      // Fetch the WASM binary
      const wasmResponse = await fetch(wasmModulePath.href);
      const wasmBuffer = await wasmResponse.arrayBuffer();
      
      // Initialize the WASM module
      await wasmInit.default(wasmBuffer);
      
      // Get the module instance
      this.module = wasmInit;
      this.isLoaded = true;
      
      this.emit(WasmEvent.LOADED, { module: this.module });
    } catch (error) {
      const tapError = new TapError({
        type: ErrorType.WASM_LOAD_ERROR,
        message: 'Failed to load WASM module',
        cause: error,
      });
      
      this.emit(WasmEvent.ERROR, { error: tapError });
      throw tapError;
    }
  }
  
  /**
   * Initialize the WASM module
   * 
   * @returns A promise that resolves when the module is initialized
   * @throws {TapError} If there's an error initializing the module
   */
  async initialize(): Promise<void> {
    if (!this.isLoaded) {
      await this.load();
    }
    
    if (this.isInitialized) {
      return;
    }
    
    try {
      // No specific initialization required beyond loading for now
      this.isInitialized = true;
    } catch (error) {
      const tapError = new TapError({
        type: ErrorType.WASM_INIT_ERROR,
        message: 'Failed to initialize WASM module',
        cause: error,
      });
      
      this.emit(WasmEvent.ERROR, { error: tapError });
      throw tapError;
    }
  }
  
  /**
   * Get the WASM module
   * 
   * @returns The WASM module
   * @throws {TapError} If the module is not loaded
   */
  getModule(): WasmModule {
    if (!this.isLoaded || !this.module) {
      throw new TapError({
        type: ErrorType.WASM_NOT_LOADED,
        message: 'WASM module is not loaded',
      });
    }
    
    return this.module;
  }
  
  /**
   * Check if the WASM module is loaded
   * 
   * @returns True if the module is loaded, false otherwise
   */
  moduleIsLoaded(): boolean {
    return this.isLoaded;
  }
  
  /**
   * Check if the WASM module is initialized
   * 
   * @returns True if the module is initialized, false otherwise
   */
  moduleIsInitialized(): boolean {
    return this.isInitialized;
  }
  
  /**
   * Add an event listener
   * 
   * @param event - Event to listen for
   * @param listener - Listener function
   */
  addEventListener(event: WasmEvent, listener: WasmEventListener): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, new Set());
    }
    
    this.listeners.get(event)!.add(listener);
  }
  
  /**
   * Remove an event listener
   * 
   * @param event - Event to stop listening for
   * @param listener - Listener function to remove
   * @returns True if the listener was removed, false otherwise
   */
  removeEventListener(event: WasmEvent, listener: WasmEventListener): boolean {
    if (!this.listeners.has(event)) {
      return false;
    }
    
    return this.listeners.get(event)!.delete(listener);
  }
  
  /**
   * Emit an event
   * 
   * @param event - Event to emit
   * @param data - Additional event data
   */
  emit(event: WasmEvent, data?: any): void {
    if (!this.listeners.has(event)) {
      return;
    }
    
    for (const listener of this.listeners.get(event)!) {
      try {
        listener(event, data);
      } catch (error) {
        console.error('Error in event listener:', error);
      }
    }
  }
}

// Create a singleton instance of the loader
const wasmLoader = new WasmLoader();

export default wasmLoader;
