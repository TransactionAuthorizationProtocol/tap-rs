# tap-ts

## Overview
The `tap-ts` package provides TypeScript/JavaScript bindings and utilities for the Travel Asset Protocol. It wraps the WASM-compiled Rust implementation and adds TypeScript-friendly APIs, making it easy to integrate TAP functionality into Node.js applications and web browsers.

## Purpose
- Provide TypeScript-native APIs for TAP
- Wrap WASM bindings with ergonomic interfaces
- Support both Node.js and browser environments
- Enable DID-based authentication in JavaScript apps
- Simplify TAP message creation and handling

## Key Components

### Agent Management
```typescript
export class TapAgent {
    constructor();
    static fromPrivateKey(privateKey: string): TapAgent;
    static fromJsonFile(path: string, password: string): Promise<TapAgent>;
    
    did(): string;
    
    async sign(message: string | object): Promise<string>;
    async encrypt(message: string | object, recipientDids: string[]): Promise<string>;
    async decrypt(encryptedMessage: string): Promise<object>;
    
    async saveToFile(path: string, password: string): Promise<void>;
    toJson(): AgentJson;
}
```

### Message Types
```typescript
export interface TransferMessage {
    type: "tap.transfer";
    referenceId: string;
    sender: Party;
    recipient: Party;
    amount: string;
    asset: Asset;
    settlementDetails?: SettlementDetails;
}

export interface Party {
    name: string;
    account: string;
    did?: string;
}

export interface Asset {
    code: string;
    issuer?: string;
    caipId?: string;  // CAIP-19 identifier
}
```

### Message Builder
```typescript
export class MessageBuilder {
    static transfer(params: {
        from: string;
        to: string[];
        amount: string;
        asset: string;
        senderName: string;
        senderAccount: string;
        recipientName: string;
        recipientAccount: string;
        referenceId?: string;
    }): TransferMessage;
    
    static connect(params: ConnectParams): ConnectMessage;
    static authorize(params: AuthorizeParams): AuthorizeMessage;
    static settle(params: SettleParams): SettleMessage;
    // ... other message types
}
```

### Message Operations
```typescript
export async function packSigned(
    message: TapMessage,
    agent: TapAgent
): Promise<string>;

export async function packEncrypted(
    message: TapMessage,
    agent: TapAgent,
    recipientDids: string[]
): Promise<string>;

export async function unpack(
    packedMessage: string,
    agent: TapAgent
): Promise<TapMessage>;

export async function verifySignature(
    signedMessage: string,
    resolver?: Resolver
): Promise<TapMessage>;
```

### DID Operations
```typescript
export class DidGenerator {
    static generate(): { did: string; privateKey: string };
    static fromPrivateKey(privateKey: string): string;
}

export class DidResolver {
    async resolve(did: string): Promise<DidDocument>;
    async resolveKey(did: string, keyId?: string): Promise<PublicKey>;
}
```

## Usage Examples

### Creating and Using Agents
```typescript
import { TapAgent, MessageBuilder, packSigned } from 'tap-ts';

// Create new agent
const agent = new TapAgent();
console.log('Agent DID:', agent.did());

// Save agent
await agent.saveToFile('./agent.json', 'secretpassword');

// Load agent
const loadedAgent = await TapAgent.fromJsonFile('./agent.json', 'secretpassword');
```

### Sending a Transfer
```typescript
// Create transfer message
const transfer = MessageBuilder.transfer({
    from: agent.did(),
    to: ['did:key:recipient'],
    amount: '100.00',
    asset: 'USDC',
    senderName: 'Alice',
    senderAccount: 'eip155:1:0x123...',
    recipientName: 'Bob',
    recipientAccount: 'eip155:1:0x456...',
    referenceId: 'tx-123'
});

// Sign the message
const signedMessage = await packSigned(transfer, agent);

// Send via HTTP
const response = await fetch('https://tap-node.example.com/messages', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: signedMessage
});
```

### Receiving and Processing Messages
```typescript
import { unpack, isTransferMessage } from 'tap-ts';

// Receive message
const packedMessage = await receiveMessage();

// Unpack and verify
const message = await unpack(packedMessage, agent);

// Process based on type
if (isTransferMessage(message)) {
    console.log(`Transfer of ${message.amount} ${message.asset.code}`);
    console.log(`From: ${message.sender.name}`);
    console.log(`To: ${message.recipient.name}`);
}
```

### React Hook Example
```typescript
import { useState, useEffect } from 'react';
import { TapAgent } from 'tap-ts';

export function useTapAgent() {
    const [agent, setAgent] = useState<TapAgent | null>(null);
    const [loading, setLoading] = useState(true);
    
    useEffect(() => {
        // Initialize WASM and create agent
        TapAgent.initialize().then(() => {
            const newAgent = new TapAgent();
            setAgent(newAgent);
            setLoading(false);
        });
    }, []);
    
    return { agent, loading };
}
```

### Express.js Integration
```typescript
import express from 'express';
import { TapAgent, unpack } from 'tap-ts';

const app = express();
const agent = await TapAgent.fromJsonFile('./node-agent.json', 'password');

app.post('/tap/messages', async (req, res) => {
    try {
        const message = await unpack(req.body, agent);
        
        // Process message
        await processMessage(message);
        
        res.json({ success: true });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});
```

## CLI Tools

### DID Generator
```bash
# Generate new DID
npx tap-ts generate-did

# Generate from private key
npx tap-ts generate-did --private-key <hex-key>

# Save to file
npx tap-ts generate-did --output agent.json --password mypassword
```

### Message Sender
```bash
# Send transfer
npx tap-ts send-transfer \
  --agent agent.json \
  --password mypassword \
  --to did:key:recipient \
  --amount 100 \
  --asset USDC \
  --endpoint https://node.example.com/messages
```

## Configuration

### TypeScript Configuration
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "types": ["tap-ts"]
  }
}
```

### Webpack Configuration
```javascript
module.exports = {
    experiments: {
        asyncWebAssembly: true
    },
    module: {
        rules: [{
            test: /\.wasm$/,
            type: 'webassembly/async'
        }]
    }
};
```

## Key Features
- **TypeScript Native**: Full type definitions
- **WASM Integration**: Seamless WASM loading
- **Isomorphic**: Works in Node.js and browsers
- **Type Guards**: Runtime type checking
- **Builder Pattern**: Fluent message creation
- **Async/Await**: Modern async APIs
- **Tree-Shakeable**: Optimized bundles

## Testing
```bash
# Run tests
npm test

# Run specific test
npm test -- agent.test.ts

# Test in browser
npm run test:browser
```

## Building
```bash
# Build TypeScript
npm run build

# Build WASM dependencies
npm run build:wasm

# Build for production
npm run build:prod
```

## Dependencies
- `tap-wasm`: WASM bindings (bundled)
- TypeScript types only - no runtime deps

## Related Packages
- `tap-wasm`: Core WASM implementation
- `@tap/react`: React components (planned)
- `@tap/vue`: Vue components (planned)